@page "/classes"

@using Common.APIModels;
@using Microsoft.Azure.CognitiveServices.Vision.Face;
@using Microsoft.Azure.CognitiveServices.Vision.Face.Models;
@using System.Diagnostics;
@using System.Text.RegularExpressions;
@using Frontend.Operations;
@using Microsoft.Extensions.Configuration;

@inject IConfiguration Configuration;
@inject FaceApiOperations ApiOperations;
@inject HttpClient Http;
@inject IJSRuntime JSRuntime;

<PageTitle>Classes</PageTitle>

<div class = "wrapper-div">
    <div class = "wrapper-div-upper">
        <a href = '/' class = "app-name">hazir</a>
    </div>

    <div class = "wrapper-div-lower">
        <div class = "wrapper-div-sidebar">
            <div class = "nav-item">
                <button type="button" class = "nav-item-head" @onclick="@expandSidebar">
                    <span class = "oi oi-calendar"></span> Classes
                </button>
                @if (expandSubNav)
                {
                    if (classes == null)
                    {
                        <p class = "nav-subitem">Loading...</p>
                    }
                    else
                    {
                        foreach (var classData in classes)
                        {
                            string cssClass = "nav-subitem unselected";
                            if (selectedClass?.Id == classData?.Id)
                            {
                                cssClass = "nav-subitem selected";
                            }
                            <button type="button" class = "@cssClass" @onclick="() => selectClass(classData)">
                                <span class = "oi oi-pencil" />
                                @classData?.Name
                            </button>
                        }
                    }
                }
            </div>
        </div>

        <div class = "wrapper-div-middle">

            @if (true)
            {
                string formCss = "form display-none";
                string cameraCss = "camera display-none";
                string captureCss = "take-attendance display-none";
                if (selectedClass != null)
                {
                    formCss = "form";
                }

                if (attendanceStarted)
                {
                    cameraCss = "camera";
                }

                <EditForm Model = "@Date" OnValidSubmit = "@HandleValidSubmit">
                   <div  class = "@formCss">
                       <div class = "fill-date">
                           <label for="Date">Attendance Date</label>
                           <InputDate id = "attendance-date" class = "fill-date select-date" @bind-Value = "Date"/>
                       </div>
                       <button type = "submit" class = "take-attendance"> Take Attendance</button>
                   </div>
                </EditForm>

                if (canCapture)
                {
                    captureCss = "take-attendance";
                }



                <div class = "@cameraCss">
                    <div id="camera"></div>
                    @if (canCapture)
                    {
                        <button class = "take-attendance" @onclick="Capture">Capture</button>
                    }
                </div>
            }
        </div>

        <div class = "wrapper-div-right">
            @if (selectedClass == null)
            {
                <div class = "instruction">Select any class to view students</div>
            }
            else
            {
                <div class = "instruction">Students</div>
                if (selectedClass.Students == null)
                {
                    <div class = "instruction">This class has no students</div>
                }
                else
                {
                    if (Date == DateOnly.FromDateTime(DateTime.Now))
                    {
                        if (attendance == null)
                        {
                            foreach (var student in selectedClass.Students)
                            {
                                studentCount++;
                                if (studentCount % 2 == 0)
                                {
                                    <p class = "student no-record-even">@student.Name</p>
                                }
                                else
                                {
                                    <p class = "student no-record-odd">@student.Name</p>
                                }
                            }
                        }
                        else
                        {
                            foreach (var student in selectedClass.Students)
                            {
                                if (isPresent(student.Id))
                                {
                                    <p class = "student present">@student.Name</p>
                                }
                                else
                                {
                                    <p class = "student no-record-even">@student.Name</p>
                                }
                            }
                        }
                    }
                    else
                    {
                        foreach (var student in selectedClass.Students)
                        {
                            if (isPresent(student.Id))
                            {
                                <p class = "student present">@student.Name</p>
                            }
                            else
                            {
                                <p class = "student absent">@student.Name</p>
                            }
                        }
                    }
                }
            }
        </div>
    </div>
</div>



@code{

    private List<ClassResponseModel> classes;
    private AttendanceResponseModel attendance;
    private ClassResponseModel selectedClass;
    private int studentCount = 0;
    private bool attendanceStarted = false;
    public bool canCapture = false;
    private string baseUri;

    private DateOnly Date = DateOnly.FromDateTime(DateTime.Now);
    private bool expandSubNav;

    List<string> stringList = new List<string>();
    string aa = "";

    public async void Capture()
    {
        var imageUrl = await JSRuntime.InvokeAsync<string>("take_snapshot");
        var base64Data = Regex.Match(imageUrl, @"data:image/(?<type>.+?),(?<data>.+)").Groups["data"].Value;
        var binData = Convert.FromBase64String(base64Data);
        var stream = new MemoryStream(binData);

        canCapture = false;
        StateHasChanged();
        //await Task.Delay(2000);
        await DetectAndRecognize(stream);
        canCapture = true;
        StateHasChanged();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            JSRuntime.InvokeVoidAsync("ready", this);
        }
    }

    private bool isPresent(string studentId)
    {
        if (attendance.PrsesentStudents != null)
        {
            foreach (var student in attendance.PrsesentStudents)
            {
                if (student.Id == studentId)
                {
                    return true;
                }
            }
        }

        return false;
    }

    private void expandSidebar()
    {
        expandSubNav = !expandSubNav;
        this.selectedClass = null;
        studentCount = 0;
    }

    private async void selectClass(ClassResponseModel classData)
    {
        this.selectedClass = classData;
        await this.GetAttendanceAsync();
        studentCount = 0;
    }

    private async void HandleValidSubmit()
    {
        var uriFormat = this.baseUri + @"/Hazir/CreateAttendanceItem/classes/{0}/date/{1}";
        var uri = string.Format(uriFormat, Uri.EscapeDataString(selectedClass.Id), Uri.EscapeDataString(Date.ToString()));
        var response = await Http.PutAsJsonAsync<AttendanceResponseModel> (uri, null);

        var attendance = await response.Content.ReadFromJsonAsync<AttendanceResponseModel>();
        if (attendance != null)
        {
            attendanceStarted = true;
            this.attendance = attendance;
        }
        canCapture = true;
        StateHasChanged();
    }

    public async Task GetAttendanceAsync()
    {
        var uriFormat = this.baseUri + @"/Hazir/GetAttendanceByClassAndDate/classes/{0}/date/{1}";
        var uri = string.Format(uriFormat, Uri.EscapeDataString(selectedClass.Id), Uri.EscapeDataString(Date.ToString()));
        var response = await Http.GetFromJsonAsync<AttendanceResponseModel>(uri);
        if (response != null)
        {
            this.attendance = response;
            attendanceStarted = true;
        }

        StateHasChanged();
    }

    public async Task DetectAndRecognize(Stream image)
    {
        var faceIds = await ApiOperations.DetectFaceAsync(image);
        if (faceIds.Count > 0)
        {
            var studentId = await ApiOperations.RecognizeFaceAsync(faceIds);
            if (studentId != null)
            {
                await MarkAttendanceAsync(studentId);
            }
        }
    }

    public async Task MarkAttendanceAsync(string studentId)
    {
        var uriFormat = this.baseUri + @"/Hazir/MarkAttendance/attendance/{0}/classes/{1}/students/{2}";
        var uri = string.Format(uriFormat, Uri.EscapeDataString(attendance.Id), Uri.EscapeDataString(selectedClass.Id), Uri.EscapeDataString(studentId));
        var response = await Http.PostAsync(uri, null);
        await this.GetAttendanceAsync();
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        //await faceAPIOperations.DeleteAllFacesAsync();
        //await faceAPIOperations.CreatePersonGroupAsync();

        //await faceAPIOperations.CreatePersonGroupPersonAsync ("https://cdn.britannica.com/41/218341-050-51D8903F/American-actor-John-Krasinski-2020.jpg", "John", "2287612e-b58d-46ad-b606-9c929506cff4");
        //await faceAPIOperations.CreatePersonGroupPersonAsync ("https://stylesatlife.com/wp-content/uploads/2021/11/Deepika-Padukone-Face-Shape.jpg","Deepika","44ecbe6c-65c0-43c6-ac43-80ab32276d3a");
        //await faceAPIOperations.CreatePersonGroupPersonAsync ("https://upload.wikimedia.org/wikipedia/commons/thumb/a/a4/Liam_Hemsworth_June_2016.jpg/800px-Liam_Hemsworth_June_2016.jpg","Liam", "da23c451-27b6-4ecb-9775-8278d8e11b15");
        //await faceAPIOperations.CreatePersonGroupPersonAsync ("https://filmfare.wwmindia.com/content/2018/mar/thu_1520432436.jpg","Madhuri","5c967e59-8204-448a-9df0-907f30ffda4a");
        //await faceAPIOperations.CreatePersonGroupPersonAsync ("https://assets.teenvogue.com/photos/57b21ac3f905d69b69712825/16:9/w_2560%2Cc_limit/GettyImages-513006150.jpg","Sophie", "c3e9a82f-b87c-4530-bffd-2d09a1eef4ce");
        //await faceAPIOperations.CreatePersonGroupPersonAsync ("https://www.dailypioneer.com/uploads/2020/story/images/big/kanan-gill-gets-first-netflix-original-comedy-special-2020-04-04.jpg","Kanan", "69906e17-a5d7-46d4-b37c-647d6b6f8eb6");
        //await faceAPIOperations.CreatePersonGroupPersonAsync ("https://i2.cinestaan.com/image-bank/1500-1500/132001-133000/132977.jpg","Shaan", "bca4333e-d443-4103-a0f7-9af250830925");
        //await faceAPIOperations.CreatePersonGroupPersonAsync ("https://scontent.fccu19-1.fna.fbcdn.net/v/t39.30808-6/241132299_256239166502984_6348775860402915062_n.jpg?_nc_cat=107&ccb=1-7&_nc_sid=09cbfe&_nc_ohc=scRcRjxRNt8AX_eGzBt&_nc_ht=scontent.fccu19-1.fna&oh=00_AT944wbQK1Jfs6YtTcdlTWFQX5y4nAd8Puq3PWTTRHJ-zw&oe=62972F81","Debopriya","207312f9-9ccc-4915-8c05-0d67aa3f3492");
        //await faceAPIOperations.CreatePersonGroupPersonAsync ("https://pbs.twimg.com/profile_images/1249391923594436608/tZZjwavR_400x400.jpg","Gautam","091f9fe4-ef5b-4e58-b74f-196cc07d491c");
        //await faceAPIOperations.CreatePersonGroupPersonAsync ("https://scontent.fccu19-1.fna.fbcdn.net/v/t1.6435-9/41951358_1330759950389187_4905570216513110016_n.jpg?_nc_cat=105&ccb=1-7&_nc_sid=e3f864&_nc_ohc=xEddw_NOTxcAX9UV09d&_nc_ht=scontent.fccu19-1.fna&oh=00_AT_EZtulVrUxJFVYDGfMo2voHc2Uh-N1B3MncO3k_LXmNg&oe=62B7DF02","Nanda","cbdcdb32-1dd3-4d2b-9924-807e9dcf0195");


        //await faceAPIOperations.TrainPersonGroupAsync();
        //await faceAPIOperations.GetPersonGroupAsync();

        this.baseUri = Configuration["BackendUri"];

        var response = await Http.GetFromJsonAsync<List<ClassResponseModel>>($"{this.baseUri}/Hazir/GetClassesByTeacher/teachers/79f4b45a-5043-4132-a168-07e21310062b");
        if (response != null)
        {
            this.classes = response;
        }
    }
}