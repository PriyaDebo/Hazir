@page "/classes"
@using Common.APIModels;
@using System.Diagnostics;
@inject HttpClient Http;
@inject IJSRuntime JSRuntime;

<PageTitle>Classes</PageTitle>

<div class = "wrapper-div">
    <div class = "wrapper-div-upper">
        <a href = '/' class = "app-name">hazir</a>
    </div>

    <div class = "wrapper-div-lower">
        <div class = "wrapper-div-sidebar">
            <div class = "nav-item">
                <button type="button" class = "nav-item-head" @onclick="@expandSidebar">
                    <span class = "oi oi-calendar"></span> Classes
                </button>
                @if (expandSubNav)
                {
                    if (classes == null)
                    {
                        <p class = "nav-subitem">Loading...</p>
                    }
                    else
                    {
                        foreach (var classData in classes)
                        {
                            string cssClass = "nav-subitem unselected";
                            if (selectedClass?.Id == classData?.Id)
                            {
                                cssClass = "nav-subitem selected";
                            }
                            <button type="button" class = "@cssClass" @onclick="() => selectClass(classData)">
                                <span class = "oi oi-pencil" />
                                @classData?.Name
                            </button>
                            }
                    }
                }
            </div>
        </div>

        <div class = "wrapper-div-middle">
           @if (selectedClass != null)
           {
               <EditForm Model = "@Date" OnValidSubmit = "@HandleValidSubmit">
                   <div  class = "form">
                       <div class = "fill-date">
                           <label for="Date">Attendance Date</label>
                           <InputDate id = "attendance-date" class = "fill-date select-date" @bind-Value = "Date"/>
                       </div>
                       <button type = "submit" class = "take-attendance" >Take Attendance</button>
                   </div>
               </EditForm>
           }

            @if (true)
            {
                <div class = "camera">
                         <div id="camera"></div>
                 <button class = "take-attendance" @onclick="Capture">Capture</button>
                 </div>
            }
        </div>

        <div class = "wrapper-div-right">
            @if (selectedClass == null)
            {
                <div class = "instruction">Select any class to view students</div>
            }
            else
            {
                <div class = "instruction">Students</div>
                if (selectedClass.Students == null)
                {
                    <div class = "instruction">This class has no students</div>
                }
                else
                {
                    if (Date == DateOnly.FromDateTime(DateTime.Now))
                    {
                        if (attendance == null)
                        {
                            foreach (var student in selectedClass.Students)
                            {
                                studentCount++;
                                if (studentCount % 2 == 0)
                                {
                                    <p class = "student no-record-even">@student.Name</p>
                                }
                                else
                                {
                                    <p class = "student no-record-odd">@student.Name</p>
                                }
                            }
                        }
                        else
                        {
                            foreach (var student in selectedClass.Students)
                            {
                                if (isPresent(student.Id))
                                {
                                    <p class = "student present">@student.Name</p>
                                }
                                else
                                {
                                    <p class = "student no-record-even">@student.Name</p>
                                }
                            }
                        }
                    }
                    else
                    {
                        foreach (var student in selectedClass.Students)
                        {
                            if (isPresent(student.Id))
                            {
                                <p class = "student present">@student.Name</p>
                            }
                            else
                            {
                                <p class = "student absent">@student.Name</p>
                            }
                        }
                    }
                }
            }
        </div>
    </div>
</div>



@code{


    List<string> stringList = new List<string>();
    string aa = "";
    public async void Capture()
    {
        stringList.Add(await JSRuntime.InvokeAsync<string>("take_snapshot"));
        StateHasChanged();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            JSRuntime.InvokeVoidAsync("ready", this);
        }
    }


    private List<ClassResponseModel> classes;
    private AttendanceResponseModel attendance;
    private ClassResponseModel selectedClass;
    private int studentCount = 0;
    private bool attendanceStarted = false;

    private DateOnly Date = DateOnly.FromDateTime(DateTime.Now);
    private bool expandSubNav;

    private bool isPresent(string studentId)
    {
        foreach (var student in attendance.PrsesentStudents)
        {
            if (student.Id == studentId)
            {
                return true;
            }
        }
        return false;
    }

    private void expandSidebar()
    {
        expandSubNav = !expandSubNav;
        this.selectedClass = null;
        studentCount = 0;
    }

    private void selectClass(ClassResponseModel classData)
    {
        this.selectedClass = classData;
        studentCount = 0;
    }

    private async void HandleValidSubmit()
    {
        var uriFormat = @"https://localhost:7204/Hazir/CreateAttendanceItem/classes/{0}/date/{1}";
        var uri = string.Format(uriFormat, Uri.EscapeDataString(selectedClass.Id), Uri.EscapeDataString(Date.ToString()));
        var response = await Http.PutAsJsonAsync<AttendanceResponseModel>(uri, null);

        var attendance = await response.Content.ReadFromJsonAsync<AttendanceResponseModel>();
        if (attendance != null)
        {
            attendanceStarted = true;
            this.attendance = attendance;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var response = await Http.GetFromJsonAsync<List<ClassResponseModel>>("https://localhost:7204/Hazir/GetClassesByTeacher/teachers/79f4b45a-5043-4132-a168-07e21310062b");
        if (response != null)
        {
            this.classes = response;
        }
    }
}
